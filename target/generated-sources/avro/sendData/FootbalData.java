/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package sendData;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FootbalData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2462787890779209642L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FootbalData\",\"namespace\":\"sendData\",\"fields\":[{\"name\":\"count\",\"type\":\"int\"},{\"name\":\"filters\",\"type\":\"null\"},{\"name\":\"areas\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"Country\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"countryCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"flag\",\"type\":\"null\"},{\"name\":\"parentAreaId\",\"type\":\"int\"},{\"name\":\"parentArea\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FootbalData> ENCODER =
      new BinaryMessageEncoder<FootbalData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FootbalData> DECODER =
      new BinaryMessageDecoder<FootbalData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FootbalData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FootbalData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FootbalData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FootbalData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FootbalData from a ByteBuffer. */
  public static FootbalData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int count;
   private java.lang.Void filters;
   private java.util.List<java.lang.Object> areas;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FootbalData() {}

  /**
   * All-args constructor.
   * @param count The new value for count
   * @param filters The new value for filters
   * @param areas The new value for areas
   */
  public FootbalData(java.lang.Integer count, java.lang.Void filters, java.util.List<java.lang.Object> areas) {
    this.count = count;
    this.filters = filters;
    this.areas = areas;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return count;
    case 1: return filters;
    case 2: return areas;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: count = (java.lang.Integer)value$; break;
    case 1: filters = (java.lang.Void)value$; break;
    case 2: areas = (java.util.List<java.lang.Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }


  /**
   * Gets the value of the 'filters' field.
   * @return The value of the 'filters' field.
   */
  public java.lang.Void getFilters() {
    return filters;
  }


  /**
   * Gets the value of the 'areas' field.
   * @return The value of the 'areas' field.
   */
  public java.util.List<java.lang.Object> getAreas() {
    return areas;
  }


  /**
   * Creates a new FootbalData RecordBuilder.
   * @return A new FootbalData RecordBuilder
   */
  public static sendData.FootbalData.Builder newBuilder() {
    return new sendData.FootbalData.Builder();
  }

  /**
   * Creates a new FootbalData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FootbalData RecordBuilder
   */
  public static sendData.FootbalData.Builder newBuilder(sendData.FootbalData.Builder other) {
    return new sendData.FootbalData.Builder(other);
  }

  /**
   * Creates a new FootbalData RecordBuilder by copying an existing FootbalData instance.
   * @param other The existing instance to copy.
   * @return A new FootbalData RecordBuilder
   */
  public static sendData.FootbalData.Builder newBuilder(sendData.FootbalData other) {
    return new sendData.FootbalData.Builder(other);
  }

  /**
   * RecordBuilder for FootbalData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FootbalData>
    implements org.apache.avro.data.RecordBuilder<FootbalData> {

    private int count;
    private java.lang.Void filters;
    private java.util.List<java.lang.Object> areas;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(sendData.FootbalData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.count)) {
        this.count = data().deepCopy(fields()[0].schema(), other.count);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.filters)) {
        this.filters = data().deepCopy(fields()[1].schema(), other.filters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.areas)) {
        this.areas = data().deepCopy(fields()[2].schema(), other.areas);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FootbalData instance
     * @param other The existing instance to copy.
     */
    private Builder(sendData.FootbalData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.count)) {
        this.count = data().deepCopy(fields()[0].schema(), other.count);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.filters)) {
        this.filters = data().deepCopy(fields()[1].schema(), other.filters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.areas)) {
        this.areas = data().deepCopy(fields()[2].schema(), other.areas);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public java.lang.Integer getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public sendData.FootbalData.Builder setCount(int value) {
      validate(fields()[0], value);
      this.count = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public sendData.FootbalData.Builder clearCount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'filters' field.
      * @return The value.
      */
    public java.lang.Void getFilters() {
      return filters;
    }

    /**
      * Sets the value of the 'filters' field.
      * @param value The value of 'filters'.
      * @return This builder.
      */
    public sendData.FootbalData.Builder setFilters(java.lang.Void value) {
      validate(fields()[1], value);
      this.filters = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'filters' field has been set.
      * @return True if the 'filters' field has been set, false otherwise.
      */
    public boolean hasFilters() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'filters' field.
      * @return This builder.
      */
    public sendData.FootbalData.Builder clearFilters() {
      filters = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'areas' field.
      * @return The value.
      */
    public java.util.List<java.lang.Object> getAreas() {
      return areas;
    }

    /**
      * Sets the value of the 'areas' field.
      * @param value The value of 'areas'.
      * @return This builder.
      */
    public sendData.FootbalData.Builder setAreas(java.util.List<java.lang.Object> value) {
      validate(fields()[2], value);
      this.areas = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'areas' field has been set.
      * @return True if the 'areas' field has been set, false otherwise.
      */
    public boolean hasAreas() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'areas' field.
      * @return This builder.
      */
    public sendData.FootbalData.Builder clearAreas() {
      areas = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FootbalData build() {
      try {
        FootbalData record = new FootbalData();
        record.count = fieldSetFlags()[0] ? this.count : (java.lang.Integer) defaultValue(fields()[0]);
        record.filters = fieldSetFlags()[1] ? this.filters : (java.lang.Void) defaultValue(fields()[1]);
        record.areas = fieldSetFlags()[2] ? this.areas : (java.util.List<java.lang.Object>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FootbalData>
    WRITER$ = (org.apache.avro.io.DatumWriter<FootbalData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FootbalData>
    READER$ = (org.apache.avro.io.DatumReader<FootbalData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
