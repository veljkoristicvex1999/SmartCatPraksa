/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package sendData;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Country extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1222721707351401784L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Country\",\"namespace\":\"sendData\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"countryCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"flag\",\"type\":\"null\"},{\"name\":\"parentAreaId\",\"type\":\"int\"},{\"name\":\"parentArea\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Country> ENCODER =
      new BinaryMessageEncoder<Country>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Country> DECODER =
      new BinaryMessageDecoder<Country>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Country> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Country> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Country>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Country to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Country from a ByteBuffer. */
  public static Country fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int id;
   private java.lang.String name;
   private java.lang.String countryCode;
   private java.lang.Void flag;
   private int parentAreaId;
   private java.lang.String parentArea;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Country() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param countryCode The new value for countryCode
   * @param flag The new value for flag
   * @param parentAreaId The new value for parentAreaId
   * @param parentArea The new value for parentArea
   */
  public Country(java.lang.Integer id, java.lang.String name, java.lang.String countryCode, java.lang.Void flag, java.lang.Integer parentAreaId, java.lang.String parentArea) {
    this.id = id;
    this.name = name;
    this.countryCode = countryCode;
    this.flag = flag;
    this.parentAreaId = parentAreaId;
    this.parentArea = parentArea;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return countryCode;
    case 3: return flag;
    case 4: return parentAreaId;
    case 5: return parentArea;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: countryCode = (java.lang.String)value$; break;
    case 3: flag = (java.lang.Void)value$; break;
    case 4: parentAreaId = (java.lang.Integer)value$; break;
    case 5: parentArea = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'countryCode' field.
   * @return The value of the 'countryCode' field.
   */
  public java.lang.String getCountryCode() {
    return countryCode;
  }


  /**
   * Gets the value of the 'flag' field.
   * @return The value of the 'flag' field.
   */
  public java.lang.Void getFlag() {
    return flag;
  }


  /**
   * Gets the value of the 'parentAreaId' field.
   * @return The value of the 'parentAreaId' field.
   */
  public java.lang.Integer getParentAreaId() {
    return parentAreaId;
  }


  /**
   * Gets the value of the 'parentArea' field.
   * @return The value of the 'parentArea' field.
   */
  public java.lang.String getParentArea() {
    return parentArea;
  }


  /**
   * Creates a new Country RecordBuilder.
   * @return A new Country RecordBuilder
   */
  public static sendData.Country.Builder newBuilder() {
    return new sendData.Country.Builder();
  }

  /**
   * Creates a new Country RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Country RecordBuilder
   */
  public static sendData.Country.Builder newBuilder(sendData.Country.Builder other) {
    return new sendData.Country.Builder(other);
  }

  /**
   * Creates a new Country RecordBuilder by copying an existing Country instance.
   * @param other The existing instance to copy.
   * @return A new Country RecordBuilder
   */
  public static sendData.Country.Builder newBuilder(sendData.Country other) {
    return new sendData.Country.Builder(other);
  }

  /**
   * RecordBuilder for Country instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Country>
    implements org.apache.avro.data.RecordBuilder<Country> {

    private int id;
    private java.lang.String name;
    private java.lang.String countryCode;
    private java.lang.Void flag;
    private int parentAreaId;
    private java.lang.String parentArea;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(sendData.Country.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[2].schema(), other.countryCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.flag)) {
        this.flag = data().deepCopy(fields()[3].schema(), other.flag);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.parentAreaId)) {
        this.parentAreaId = data().deepCopy(fields()[4].schema(), other.parentAreaId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parentArea)) {
        this.parentArea = data().deepCopy(fields()[5].schema(), other.parentArea);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Country instance
     * @param other The existing instance to copy.
     */
    private Builder(sendData.Country other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[2].schema(), other.countryCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.flag)) {
        this.flag = data().deepCopy(fields()[3].schema(), other.flag);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.parentAreaId)) {
        this.parentAreaId = data().deepCopy(fields()[4].schema(), other.parentAreaId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parentArea)) {
        this.parentArea = data().deepCopy(fields()[5].schema(), other.parentArea);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public sendData.Country.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public sendData.Country.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public sendData.Country.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public sendData.Country.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryCode' field.
      * @return The value.
      */
    public java.lang.String getCountryCode() {
      return countryCode;
    }

    /**
      * Sets the value of the 'countryCode' field.
      * @param value The value of 'countryCode'.
      * @return This builder.
      */
    public sendData.Country.Builder setCountryCode(java.lang.String value) {
      validate(fields()[2], value);
      this.countryCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'countryCode' field has been set.
      * @return True if the 'countryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'countryCode' field.
      * @return This builder.
      */
    public sendData.Country.Builder clearCountryCode() {
      countryCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'flag' field.
      * @return The value.
      */
    public java.lang.Void getFlag() {
      return flag;
    }

    /**
      * Sets the value of the 'flag' field.
      * @param value The value of 'flag'.
      * @return This builder.
      */
    public sendData.Country.Builder setFlag(java.lang.Void value) {
      validate(fields()[3], value);
      this.flag = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'flag' field has been set.
      * @return True if the 'flag' field has been set, false otherwise.
      */
    public boolean hasFlag() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'flag' field.
      * @return This builder.
      */
    public sendData.Country.Builder clearFlag() {
      flag = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentAreaId' field.
      * @return The value.
      */
    public java.lang.Integer getParentAreaId() {
      return parentAreaId;
    }

    /**
      * Sets the value of the 'parentAreaId' field.
      * @param value The value of 'parentAreaId'.
      * @return This builder.
      */
    public sendData.Country.Builder setParentAreaId(int value) {
      validate(fields()[4], value);
      this.parentAreaId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'parentAreaId' field has been set.
      * @return True if the 'parentAreaId' field has been set, false otherwise.
      */
    public boolean hasParentAreaId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'parentAreaId' field.
      * @return This builder.
      */
    public sendData.Country.Builder clearParentAreaId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentArea' field.
      * @return The value.
      */
    public java.lang.String getParentArea() {
      return parentArea;
    }

    /**
      * Sets the value of the 'parentArea' field.
      * @param value The value of 'parentArea'.
      * @return This builder.
      */
    public sendData.Country.Builder setParentArea(java.lang.String value) {
      validate(fields()[5], value);
      this.parentArea = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'parentArea' field has been set.
      * @return True if the 'parentArea' field has been set, false otherwise.
      */
    public boolean hasParentArea() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'parentArea' field.
      * @return This builder.
      */
    public sendData.Country.Builder clearParentArea() {
      parentArea = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Country build() {
      try {
        Country record = new Country();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.countryCode = fieldSetFlags()[2] ? this.countryCode : (java.lang.String) defaultValue(fields()[2]);
        record.flag = fieldSetFlags()[3] ? this.flag : (java.lang.Void) defaultValue(fields()[3]);
        record.parentAreaId = fieldSetFlags()[4] ? this.parentAreaId : (java.lang.Integer) defaultValue(fields()[4]);
        record.parentArea = fieldSetFlags()[5] ? this.parentArea : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Country>
    WRITER$ = (org.apache.avro.io.DatumWriter<Country>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Country>
    READER$ = (org.apache.avro.io.DatumReader<Country>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
